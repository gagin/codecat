Attempting to fetch gocodewalker (if needed)...
--- Package Overview ---
package gocodewalker // import "github.com/boyter/gocodewalker"

const GitIgnore = ".gitignore" ...
var ErrTerminateWalk = errors.New("gocodewalker terminated")
func FindRepositoryRoot(startDirectory string) string
func GetExtension(name string) string
func IsHidden(file os.FileInfo, directory string) (bool, error)
func IsHiddenDirEntry(file fs.DirEntry, directory string) (bool, error)
type File struct{ ... }
type FileWalker struct{ ... }
    func NewFileWalker(directory string, fileListQueue chan *File) *FileWalker
    func NewParallelFileWalker(directories []string, fileListQueue chan *File) *FileWalker

--- FileWalker Struct ---
package gocodewalker // import "github.com/boyter/gocodewalker"

type FileWalker struct {
	LocationExcludePattern []string // Case-sensitive patterns which exclude directory/file matches
	IncludeDirectory       []string
	ExcludeDirectory       []string // Paths to always ignore such as .git,.svn and .hg
	IncludeFilename        []string
	ExcludeFilename        []string
	IncludeDirectoryRegex  []*regexp.Regexp // Must match regex as logical OR IE can match any of them
	ExcludeDirectoryRegex  []*regexp.Regexp
	IncludeFilenameRegex   []*regexp.Regexp
	ExcludeFilenameRegex   []*regexp.Regexp
	AllowListExtensions    []string // Which extensions should be allowed case sensitive
	ExcludeListExtensions  []string // Which extensions should be excluded case sensitive

	IgnoreIgnoreFile bool     // Should .ignore files be respected?
	IgnoreGitIgnore  bool     // Should .gitignore files be respected?
	IgnoreGitModules bool     // Should .gitmodules files be respected?
	CustomIgnore     []string // Custom ignore files
	IncludeHidden    bool     // Should hidden files and directories be included/walked

	MaxDepth int
	// Has unexported fields.
}

func NewFileWalker(directory string, fileListQueue chan *File) *FileWalker
func NewParallelFileWalker(directories []string, fileListQueue chan *File) *FileWalker
func (f *FileWalker) SetConcurrency(i int)
func (f *FileWalker) SetErrorHandler(errors func(error) bool)
func (f *FileWalker) Start() error
func (f *FileWalker) Terminate()
func (f *FileWalker) Walking() bool

--- File Struct ---
package gocodewalker // import "github.com/boyter/gocodewalker"

type File struct {
	Location string
	Filename string
}
    File is a struct returned which contains the location and the filename of
    the file that passed all exclusion rules


--- NewFileWalker Function ---
package gocodewalker // import "github.com/boyter/gocodewalker"

func NewFileWalker(directory string, fileListQueue chan *File) *FileWalker
    NewFileWalker constructs a filewalker, which will walk the supplied
    directory and output File results to the supplied queue as it finds them


--- Start Method ---
package gocodewalker // import "github.com/boyter/gocodewalker"

func (f *FileWalker) Start() error
    Start will start walking the supplied directory with the supplied settings
    and putting files that mach into the supplied channel. Returns usual ioutil
    errors if there is a file issue and a ErrTerminateWalk if terminate is
    called while walking


--- SetErrorHandler Method ---
package gocodewalker // import "github.com/boyter/gocodewalker"

func (f *FileWalker) SetErrorHandler(errors func(error) bool)
    SetErrorHandler sets the function that is called on processing any error
    where if you return true it will attempt to continue processing, and if
    false will return the error instantly


--- Done ---
